State 6 conflicts: 1 reduce/reduce
State 45 conflicts: 1 shift/reduce
State 134 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: decl_list
    2        | decl

    3 decl_list: decl_list decl
    4          | decl

    5 decl: var_decl
    6     | func_decl

    7 var_decl: type_spec var_list ';'

    8 type_spec: INT
    9          | FLOAT
   10          | CHAR

   11 var_list: var_list ',' var
   12         | var

   13 var: IDENTIFIER
   14    | IDENTIFIER '[' INTEGER ']'

   15 func_decl: type_spec IDENTIFIER '(' param_list ')' compound_stmt

   16 param_list: param_list ',' param
   17           | param

   18 param: type_spec IDENTIFIER
   19      | type_spec IDENTIFIER '[' ']'
   20      | %empty

   21 compound_stmt: '{' local_decl_list stmt_list '}'

   22 local_decl_list: local_decl_list var_decl
   23                | %empty

   24 stmt_list: stmt_list statement
   25          | %empty

   26 statement: open_if_stmt
   27          | closed_if_stmt

   28 open_if_stmt: IF '(' expr ')' statement
   29             | IF '(' expr ')' closed_if_stmt ELSE open_if_stmt

   30 closed_if_stmt: IF '(' expr ')' closed_if_stmt ELSE closed_if_stmt
   31               | expr_stmt
   32               | compound_stmt
   33               | for_stmt
   34               | while_stmt
   35               | switch_stmt
   36               | print_stmt
   37               | scan_stmt

   38 expr_stmt: expr ';'
   39          | ';'

   40 for_stmt: FOR '(' expr_stmt expr_stmt expr ')' statement

   41 while_stmt: WHILE '(' expr ')' statement

   42 switch_stmt: SWITCH '(' expr ')' '{' case_list '}'

   43 case_list: case_list case
   44          | case

   45 case: CASE INTEGER ':' stmt_list
   46     | DEFAULT ':' stmt_list

   47 print_stmt: PRINTF '(' STRING ',' arg_list ')' ';'
   48           | PRINTF '(' STRING ')' ';'

   49 arg_list: arg_list ',' expr
   50         | expr

   51 scan_stmt: SCANF '(' STRING ',' '&' IDENTIFIER ')' ';'

   52 expr: IDENTIFIER '=' expr
   53     | IDENTIFIER '[' expr ']' '=' expr
   54     | logical_or_expr

   55 logical_or_expr: logical_and_expr
   56                | logical_or_expr OR logical_and_expr

   57 logical_and_expr: equality_expr
   58                 | logical_and_expr AND equality_expr

   59 equality_expr: relational_expr
   60              | equality_expr EQ relational_expr
   61              | equality_expr NE relational_expr

   62 relational_expr: additive_expr
   63                | relational_expr '<' additive_expr
   64                | relational_expr '>' additive_expr
   65                | relational_expr LE additive_expr
   66                | relational_expr GE additive_expr

   67 additive_expr: multiplicative_expr
   68              | additive_expr '+' multiplicative_expr
   69              | additive_expr '-' multiplicative_expr

   70 multiplicative_expr: unary_expr
   71                    | multiplicative_expr '*' unary_expr
   72                    | multiplicative_expr '/' unary_expr

   73 unary_expr: postfix_expr
   74           | '-' unary_expr

   75 postfix_expr: primary_expr
   76             | IDENTIFIER '(' arg_list ')'
   77             | postfix_expr '[' expr ']'

   78 primary_expr: IDENTIFIER
   79             | INTEGER
   80             | FLOATING
   81             | CHARLIT
   82             | '(' expr ')'


Terminals, with rules where they appear

    $end (0) 0
    '&' (38) 51
    '(' (40) 15 28 29 30 40 41 42 47 48 51 76 82
    ')' (41) 15 28 29 30 40 41 42 47 48 51 76 82
    '*' (42) 71
    '+' (43) 68
    ',' (44) 11 16 47 49 51
    '-' (45) 69 74
    '/' (47) 72
    ':' (58) 45 46
    ';' (59) 7 38 39 47 48 51
    '<' (60) 63
    '=' (61) 52 53
    '>' (62) 64
    '[' (91) 14 19 53 77
    ']' (93) 14 19 53 77
    '{' (123) 21 42
    '}' (125) 21 42
    error (256)
    INT (258) 8
    FLOAT (259) 9
    CHAR (260) 10
    STRING (261) 47 48 51
    CHARLIT (262) 81
    IF (263) 28 29 30
    ELSE (264) 29 30
    FOR (265) 40
    WHILE (266) 41
    SWITCH (267) 42
    CASE (268) 45
    DEFAULT (269) 46
    PRINTF (270) 47 48
    SCANF (271) 51
    IDENTIFIER <id> (272) 13 14 15 18 19 51 52 53 76 78
    INTEGER <num> (273) 14 45 79
    FLOATING <num> (274) 80
    UMINUS (275)
    LE (276) 65
    GE (277) 66
    EQ (278) 60
    NE (279) 61
    AND (280) 58
    OR (281) 56


Nonterminals, with rules where they appear

    $accept (44)
        on left: 0
    program (45)
        on left: 1 2
        on right: 0
    decl_list (46)
        on left: 3 4
        on right: 1 3
    decl (47)
        on left: 5 6
        on right: 2 3 4
    var_decl (48)
        on left: 7
        on right: 5 22
    type_spec (49)
        on left: 8 9 10
        on right: 7 15 18 19
    var_list (50)
        on left: 11 12
        on right: 7 11
    var (51)
        on left: 13 14
        on right: 11 12
    func_decl (52)
        on left: 15
        on right: 6
    param_list (53)
        on left: 16 17
        on right: 15 16
    param (54)
        on left: 18 19 20
        on right: 16 17
    compound_stmt (55)
        on left: 21
        on right: 15 32
    local_decl_list (56)
        on left: 22 23
        on right: 21 22
    stmt_list (57)
        on left: 24 25
        on right: 21 24 45 46
    statement (58)
        on left: 26 27
        on right: 24 28 40 41
    open_if_stmt (59)
        on left: 28 29
        on right: 26 29
    closed_if_stmt (60)
        on left: 30 31 32 33 34 35 36 37
        on right: 27 29 30
    expr_stmt (61)
        on left: 38 39
        on right: 31 40
    for_stmt (62)
        on left: 40
        on right: 33
    while_stmt (63)
        on left: 41
        on right: 34
    switch_stmt (64)
        on left: 42
        on right: 35
    case_list (65)
        on left: 43 44
        on right: 42 43
    case (66)
        on left: 45 46
        on right: 43 44
    print_stmt (67)
        on left: 47 48
        on right: 36
    arg_list (68)
        on left: 49 50
        on right: 47 49 76
    scan_stmt (69)
        on left: 51
        on right: 37
    expr (70)
        on left: 52 53 54
        on right: 28 29 30 38 40 41 42 49 50 52 53 77 82
    logical_or_expr (71)
        on left: 55 56
        on right: 54 56
    logical_and_expr (72)
        on left: 57 58
        on right: 55 56 58
    equality_expr (73)
        on left: 59 60 61
        on right: 57 58 60 61
    relational_expr (74)
        on left: 62 63 64 65 66
        on right: 59 60 61 63 64 65 66
    additive_expr (75)
        on left: 67 68 69
        on right: 62 63 64 65 66 68 69
    multiplicative_expr (76)
        on left: 70 71 72
        on right: 67 68 69 71 72
    unary_expr (77)
        on left: 73 74
        on right: 70 71 72 74
    postfix_expr (78)
        on left: 75 76 77
        on right: 73 77
    primary_expr (79)
        on left: 78 79 80 81 82
        on right: 75


State 0

    0 $accept: . program $end

    INT    shift, and go to state 1
    FLOAT  shift, and go to state 2
    CHAR   shift, and go to state 3

    program    go to state 4
    decl_list  go to state 5
    decl       go to state 6
    var_decl   go to state 7
    type_spec  go to state 8
    func_decl  go to state 9


State 1

    8 type_spec: INT .

    $default  reduce using rule 8 (type_spec)


State 2

    9 type_spec: FLOAT .

    $default  reduce using rule 9 (type_spec)


State 3

   10 type_spec: CHAR .

    $default  reduce using rule 10 (type_spec)


State 4

    0 $accept: program . $end

    $end  shift, and go to state 10


State 5

    1 program: decl_list .
    3 decl_list: decl_list . decl

    INT    shift, and go to state 1
    FLOAT  shift, and go to state 2
    CHAR   shift, and go to state 3

    $default  reduce using rule 1 (program)

    decl       go to state 11
    var_decl   go to state 7
    type_spec  go to state 8
    func_decl  go to state 9


State 6

    2 program: decl .
    4 decl_list: decl .

    $end      reduce using rule 2 (program)
    $end      [reduce using rule 4 (decl_list)]
    $default  reduce using rule 4 (decl_list)


State 7

    5 decl: var_decl .

    $default  reduce using rule 5 (decl)


State 8

    7 var_decl: type_spec . var_list ';'
   15 func_decl: type_spec . IDENTIFIER '(' param_list ')' compound_stmt

    IDENTIFIER  shift, and go to state 12

    var_list  go to state 13
    var       go to state 14


State 9

    6 decl: func_decl .

    $default  reduce using rule 6 (decl)


State 10

    0 $accept: program $end .

    $default  accept


State 11

    3 decl_list: decl_list decl .

    $default  reduce using rule 3 (decl_list)


State 12

   13 var: IDENTIFIER .
   14    | IDENTIFIER . '[' INTEGER ']'
   15 func_decl: type_spec IDENTIFIER . '(' param_list ')' compound_stmt

    '['  shift, and go to state 15
    '('  shift, and go to state 16

    $default  reduce using rule 13 (var)


State 13

    7 var_decl: type_spec var_list . ';'
   11 var_list: var_list . ',' var

    ';'  shift, and go to state 17
    ','  shift, and go to state 18


State 14

   12 var_list: var .

    $default  reduce using rule 12 (var_list)


State 15

   14 var: IDENTIFIER '[' . INTEGER ']'

    INTEGER  shift, and go to state 19


State 16

   15 func_decl: type_spec IDENTIFIER '(' . param_list ')' compound_stmt

    INT    shift, and go to state 1
    FLOAT  shift, and go to state 2
    CHAR   shift, and go to state 3

    $default  reduce using rule 20 (param)

    type_spec   go to state 20
    param_list  go to state 21
    param       go to state 22


State 17

    7 var_decl: type_spec var_list ';' .

    $default  reduce using rule 7 (var_decl)


State 18

   11 var_list: var_list ',' . var

    IDENTIFIER  shift, and go to state 23

    var  go to state 24


State 19

   14 var: IDENTIFIER '[' INTEGER . ']'

    ']'  shift, and go to state 25


State 20

   18 param: type_spec . IDENTIFIER
   19      | type_spec . IDENTIFIER '[' ']'

    IDENTIFIER  shift, and go to state 26


State 21

   15 func_decl: type_spec IDENTIFIER '(' param_list . ')' compound_stmt
   16 param_list: param_list . ',' param

    ','  shift, and go to state 27
    ')'  shift, and go to state 28


State 22

   17 param_list: param .

    $default  reduce using rule 17 (param_list)


State 23

   13 var: IDENTIFIER .
   14    | IDENTIFIER . '[' INTEGER ']'

    '['  shift, and go to state 15

    $default  reduce using rule 13 (var)


State 24

   11 var_list: var_list ',' var .

    $default  reduce using rule 11 (var_list)


State 25

   14 var: IDENTIFIER '[' INTEGER ']' .

    $default  reduce using rule 14 (var)


State 26

   18 param: type_spec IDENTIFIER .
   19      | type_spec IDENTIFIER . '[' ']'

    '['  shift, and go to state 29

    $default  reduce using rule 18 (param)


State 27

   16 param_list: param_list ',' . param

    INT    shift, and go to state 1
    FLOAT  shift, and go to state 2
    CHAR   shift, and go to state 3

    $default  reduce using rule 20 (param)

    type_spec  go to state 20
    param      go to state 30


State 28

   15 func_decl: type_spec IDENTIFIER '(' param_list ')' . compound_stmt

    '{'  shift, and go to state 31

    compound_stmt  go to state 32


State 29

   19 param: type_spec IDENTIFIER '[' . ']'

    ']'  shift, and go to state 33


State 30

   16 param_list: param_list ',' param .

    $default  reduce using rule 16 (param_list)


State 31

   21 compound_stmt: '{' . local_decl_list stmt_list '}'

    $default  reduce using rule 23 (local_decl_list)

    local_decl_list  go to state 34


State 32

   15 func_decl: type_spec IDENTIFIER '(' param_list ')' compound_stmt .

    $default  reduce using rule 15 (func_decl)


State 33

   19 param: type_spec IDENTIFIER '[' ']' .

    $default  reduce using rule 19 (param)


State 34

   21 compound_stmt: '{' local_decl_list . stmt_list '}'
   22 local_decl_list: local_decl_list . var_decl

    INT    shift, and go to state 1
    FLOAT  shift, and go to state 2
    CHAR   shift, and go to state 3

    $default  reduce using rule 25 (stmt_list)

    var_decl   go to state 35
    type_spec  go to state 36
    stmt_list  go to state 37


State 35

   22 local_decl_list: local_decl_list var_decl .

    $default  reduce using rule 22 (local_decl_list)


State 36

    7 var_decl: type_spec . var_list ';'

    IDENTIFIER  shift, and go to state 23

    var_list  go to state 13
    var       go to state 14


State 37

   21 compound_stmt: '{' local_decl_list stmt_list . '}'
   24 stmt_list: stmt_list . statement

    CHARLIT     shift, and go to state 38
    IF          shift, and go to state 39
    FOR         shift, and go to state 40
    WHILE       shift, and go to state 41
    SWITCH      shift, and go to state 42
    PRINTF      shift, and go to state 43
    SCANF       shift, and go to state 44
    IDENTIFIER  shift, and go to state 45
    INTEGER     shift, and go to state 46
    FLOATING    shift, and go to state 47
    '-'         shift, and go to state 48
    ';'         shift, and go to state 49
    '('         shift, and go to state 50
    '{'         shift, and go to state 31
    '}'         shift, and go to state 51

    compound_stmt        go to state 52
    statement            go to state 53
    open_if_stmt         go to state 54
    closed_if_stmt       go to state 55
    expr_stmt            go to state 56
    for_stmt             go to state 57
    while_stmt           go to state 58
    switch_stmt          go to state 59
    print_stmt           go to state 60
    scan_stmt            go to state 61
    expr                 go to state 62
    logical_or_expr      go to state 63
    logical_and_expr     go to state 64
    equality_expr        go to state 65
    relational_expr      go to state 66
    additive_expr        go to state 67
    multiplicative_expr  go to state 68
    unary_expr           go to state 69
    postfix_expr         go to state 70
    primary_expr         go to state 71


State 38

   81 primary_expr: CHARLIT .

    $default  reduce using rule 81 (primary_expr)


State 39

   28 open_if_stmt: IF . '(' expr ')' statement
   29             | IF . '(' expr ')' closed_if_stmt ELSE open_if_stmt
   30 closed_if_stmt: IF . '(' expr ')' closed_if_stmt ELSE closed_if_stmt

    '('  shift, and go to state 72


State 40

   40 for_stmt: FOR . '(' expr_stmt expr_stmt expr ')' statement

    '('  shift, and go to state 73


State 41

   41 while_stmt: WHILE . '(' expr ')' statement

    '('  shift, and go to state 74


State 42

   42 switch_stmt: SWITCH . '(' expr ')' '{' case_list '}'

    '('  shift, and go to state 75


State 43

   47 print_stmt: PRINTF . '(' STRING ',' arg_list ')' ';'
   48           | PRINTF . '(' STRING ')' ';'

    '('  shift, and go to state 76


State 44

   51 scan_stmt: SCANF . '(' STRING ',' '&' IDENTIFIER ')' ';'

    '('  shift, and go to state 77


State 45

   52 expr: IDENTIFIER . '=' expr
   53     | IDENTIFIER . '[' expr ']' '=' expr
   76 postfix_expr: IDENTIFIER . '(' arg_list ')'
   78 primary_expr: IDENTIFIER .

    '['  shift, and go to state 78
    '('  shift, and go to state 79
    '='  shift, and go to state 80

    '['       [reduce using rule 78 (primary_expr)]
    $default  reduce using rule 78 (primary_expr)


State 46

   79 primary_expr: INTEGER .

    $default  reduce using rule 79 (primary_expr)


State 47

   80 primary_expr: FLOATING .

    $default  reduce using rule 80 (primary_expr)


State 48

   74 unary_expr: '-' . unary_expr

    CHARLIT     shift, and go to state 38
    IDENTIFIER  shift, and go to state 81
    INTEGER     shift, and go to state 46
    FLOATING    shift, and go to state 47
    '-'         shift, and go to state 48
    '('         shift, and go to state 50

    unary_expr    go to state 82
    postfix_expr  go to state 70
    primary_expr  go to state 71


State 49

   39 expr_stmt: ';' .

    $default  reduce using rule 39 (expr_stmt)


State 50

   82 primary_expr: '(' . expr ')'

    CHARLIT     shift, and go to state 38
    IDENTIFIER  shift, and go to state 45
    INTEGER     shift, and go to state 46
    FLOATING    shift, and go to state 47
    '-'         shift, and go to state 48
    '('         shift, and go to state 50

    expr                 go to state 83
    logical_or_expr      go to state 63
    logical_and_expr     go to state 64
    equality_expr        go to state 65
    relational_expr      go to state 66
    additive_expr        go to state 67
    multiplicative_expr  go to state 68
    unary_expr           go to state 69
    postfix_expr         go to state 70
    primary_expr         go to state 71


State 51

   21 compound_stmt: '{' local_decl_list stmt_list '}' .

    $default  reduce using rule 21 (compound_stmt)


State 52

   32 closed_if_stmt: compound_stmt .

    $default  reduce using rule 32 (closed_if_stmt)


State 53

   24 stmt_list: stmt_list statement .

    $default  reduce using rule 24 (stmt_list)


State 54

   26 statement: open_if_stmt .

    $default  reduce using rule 26 (statement)


State 55

   27 statement: closed_if_stmt .

    $default  reduce using rule 27 (statement)


State 56

   31 closed_if_stmt: expr_stmt .

    $default  reduce using rule 31 (closed_if_stmt)


State 57

   33 closed_if_stmt: for_stmt .

    $default  reduce using rule 33 (closed_if_stmt)


State 58

   34 closed_if_stmt: while_stmt .

    $default  reduce using rule 34 (closed_if_stmt)


State 59

   35 closed_if_stmt: switch_stmt .

    $default  reduce using rule 35 (closed_if_stmt)


State 60

   36 closed_if_stmt: print_stmt .

    $default  reduce using rule 36 (closed_if_stmt)


State 61

   37 closed_if_stmt: scan_stmt .

    $default  reduce using rule 37 (closed_if_stmt)


State 62

   38 expr_stmt: expr . ';'

    ';'  shift, and go to state 84


State 63

   54 expr: logical_or_expr .
   56 logical_or_expr: logical_or_expr . OR logical_and_expr

    OR  shift, and go to state 85

    $default  reduce using rule 54 (expr)


State 64

   55 logical_or_expr: logical_and_expr .
   58 logical_and_expr: logical_and_expr . AND equality_expr

    AND  shift, and go to state 86

    $default  reduce using rule 55 (logical_or_expr)


State 65

   57 logical_and_expr: equality_expr .
   60 equality_expr: equality_expr . EQ relational_expr
   61              | equality_expr . NE relational_expr

    EQ  shift, and go to state 87
    NE  shift, and go to state 88

    $default  reduce using rule 57 (logical_and_expr)


State 66

   59 equality_expr: relational_expr .
   63 relational_expr: relational_expr . '<' additive_expr
   64                | relational_expr . '>' additive_expr
   65                | relational_expr . LE additive_expr
   66                | relational_expr . GE additive_expr

    '<'  shift, and go to state 89
    '>'  shift, and go to state 90
    LE   shift, and go to state 91
    GE   shift, and go to state 92

    $default  reduce using rule 59 (equality_expr)


State 67

   62 relational_expr: additive_expr .
   68 additive_expr: additive_expr . '+' multiplicative_expr
   69              | additive_expr . '-' multiplicative_expr

    '+'  shift, and go to state 93
    '-'  shift, and go to state 94

    $default  reduce using rule 62 (relational_expr)


State 68

   67 additive_expr: multiplicative_expr .
   71 multiplicative_expr: multiplicative_expr . '*' unary_expr
   72                    | multiplicative_expr . '/' unary_expr

    '*'  shift, and go to state 95
    '/'  shift, and go to state 96

    $default  reduce using rule 67 (additive_expr)


State 69

   70 multiplicative_expr: unary_expr .

    $default  reduce using rule 70 (multiplicative_expr)


State 70

   73 unary_expr: postfix_expr .
   77 postfix_expr: postfix_expr . '[' expr ']'

    '['  shift, and go to state 97

    $default  reduce using rule 73 (unary_expr)


State 71

   75 postfix_expr: primary_expr .

    $default  reduce using rule 75 (postfix_expr)


State 72

   28 open_if_stmt: IF '(' . expr ')' statement
   29             | IF '(' . expr ')' closed_if_stmt ELSE open_if_stmt
   30 closed_if_stmt: IF '(' . expr ')' closed_if_stmt ELSE closed_if_stmt

    CHARLIT     shift, and go to state 38
    IDENTIFIER  shift, and go to state 45
    INTEGER     shift, and go to state 46
    FLOATING    shift, and go to state 47
    '-'         shift, and go to state 48
    '('         shift, and go to state 50

    expr                 go to state 98
    logical_or_expr      go to state 63
    logical_and_expr     go to state 64
    equality_expr        go to state 65
    relational_expr      go to state 66
    additive_expr        go to state 67
    multiplicative_expr  go to state 68
    unary_expr           go to state 69
    postfix_expr         go to state 70
    primary_expr         go to state 71


State 73

   40 for_stmt: FOR '(' . expr_stmt expr_stmt expr ')' statement

    CHARLIT     shift, and go to state 38
    IDENTIFIER  shift, and go to state 45
    INTEGER     shift, and go to state 46
    FLOATING    shift, and go to state 47
    '-'         shift, and go to state 48
    ';'         shift, and go to state 49
    '('         shift, and go to state 50

    expr_stmt            go to state 99
    expr                 go to state 62
    logical_or_expr      go to state 63
    logical_and_expr     go to state 64
    equality_expr        go to state 65
    relational_expr      go to state 66
    additive_expr        go to state 67
    multiplicative_expr  go to state 68
    unary_expr           go to state 69
    postfix_expr         go to state 70
    primary_expr         go to state 71


State 74

   41 while_stmt: WHILE '(' . expr ')' statement

    CHARLIT     shift, and go to state 38
    IDENTIFIER  shift, and go to state 45
    INTEGER     shift, and go to state 46
    FLOATING    shift, and go to state 47
    '-'         shift, and go to state 48
    '('         shift, and go to state 50

    expr                 go to state 100
    logical_or_expr      go to state 63
    logical_and_expr     go to state 64
    equality_expr        go to state 65
    relational_expr      go to state 66
    additive_expr        go to state 67
    multiplicative_expr  go to state 68
    unary_expr           go to state 69
    postfix_expr         go to state 70
    primary_expr         go to state 71


State 75

   42 switch_stmt: SWITCH '(' . expr ')' '{' case_list '}'

    CHARLIT     shift, and go to state 38
    IDENTIFIER  shift, and go to state 45
    INTEGER     shift, and go to state 46
    FLOATING    shift, and go to state 47
    '-'         shift, and go to state 48
    '('         shift, and go to state 50

    expr                 go to state 101
    logical_or_expr      go to state 63
    logical_and_expr     go to state 64
    equality_expr        go to state 65
    relational_expr      go to state 66
    additive_expr        go to state 67
    multiplicative_expr  go to state 68
    unary_expr           go to state 69
    postfix_expr         go to state 70
    primary_expr         go to state 71


State 76

   47 print_stmt: PRINTF '(' . STRING ',' arg_list ')' ';'
   48           | PRINTF '(' . STRING ')' ';'

    STRING  shift, and go to state 102


State 77

   51 scan_stmt: SCANF '(' . STRING ',' '&' IDENTIFIER ')' ';'

    STRING  shift, and go to state 103


State 78

   53 expr: IDENTIFIER '[' . expr ']' '=' expr

    CHARLIT     shift, and go to state 38
    IDENTIFIER  shift, and go to state 45
    INTEGER     shift, and go to state 46
    FLOATING    shift, and go to state 47
    '-'         shift, and go to state 48
    '('         shift, and go to state 50

    expr                 go to state 104
    logical_or_expr      go to state 63
    logical_and_expr     go to state 64
    equality_expr        go to state 65
    relational_expr      go to state 66
    additive_expr        go to state 67
    multiplicative_expr  go to state 68
    unary_expr           go to state 69
    postfix_expr         go to state 70
    primary_expr         go to state 71


State 79

   76 postfix_expr: IDENTIFIER '(' . arg_list ')'

    CHARLIT     shift, and go to state 38
    IDENTIFIER  shift, and go to state 45
    INTEGER     shift, and go to state 46
    FLOATING    shift, and go to state 47
    '-'         shift, and go to state 48
    '('         shift, and go to state 50

    arg_list             go to state 105
    expr                 go to state 106
    logical_or_expr      go to state 63
    logical_and_expr     go to state 64
    equality_expr        go to state 65
    relational_expr      go to state 66
    additive_expr        go to state 67
    multiplicative_expr  go to state 68
    unary_expr           go to state 69
    postfix_expr         go to state 70
    primary_expr         go to state 71


State 80

   52 expr: IDENTIFIER '=' . expr

    CHARLIT     shift, and go to state 38
    IDENTIFIER  shift, and go to state 45
    INTEGER     shift, and go to state 46
    FLOATING    shift, and go to state 47
    '-'         shift, and go to state 48
    '('         shift, and go to state 50

    expr                 go to state 107
    logical_or_expr      go to state 63
    logical_and_expr     go to state 64
    equality_expr        go to state 65
    relational_expr      go to state 66
    additive_expr        go to state 67
    multiplicative_expr  go to state 68
    unary_expr           go to state 69
    postfix_expr         go to state 70
    primary_expr         go to state 71


State 81

   76 postfix_expr: IDENTIFIER . '(' arg_list ')'
   78 primary_expr: IDENTIFIER .

    '('  shift, and go to state 79

    $default  reduce using rule 78 (primary_expr)


State 82

   74 unary_expr: '-' unary_expr .

    $default  reduce using rule 74 (unary_expr)


State 83

   82 primary_expr: '(' expr . ')'

    ')'  shift, and go to state 108


State 84

   38 expr_stmt: expr ';' .

    $default  reduce using rule 38 (expr_stmt)


State 85

   56 logical_or_expr: logical_or_expr OR . logical_and_expr

    CHARLIT     shift, and go to state 38
    IDENTIFIER  shift, and go to state 81
    INTEGER     shift, and go to state 46
    FLOATING    shift, and go to state 47
    '-'         shift, and go to state 48
    '('         shift, and go to state 50

    logical_and_expr     go to state 109
    equality_expr        go to state 65
    relational_expr      go to state 66
    additive_expr        go to state 67
    multiplicative_expr  go to state 68
    unary_expr           go to state 69
    postfix_expr         go to state 70
    primary_expr         go to state 71


State 86

   58 logical_and_expr: logical_and_expr AND . equality_expr

    CHARLIT     shift, and go to state 38
    IDENTIFIER  shift, and go to state 81
    INTEGER     shift, and go to state 46
    FLOATING    shift, and go to state 47
    '-'         shift, and go to state 48
    '('         shift, and go to state 50

    equality_expr        go to state 110
    relational_expr      go to state 66
    additive_expr        go to state 67
    multiplicative_expr  go to state 68
    unary_expr           go to state 69
    postfix_expr         go to state 70
    primary_expr         go to state 71


State 87

   60 equality_expr: equality_expr EQ . relational_expr

    CHARLIT     shift, and go to state 38
    IDENTIFIER  shift, and go to state 81
    INTEGER     shift, and go to state 46
    FLOATING    shift, and go to state 47
    '-'         shift, and go to state 48
    '('         shift, and go to state 50

    relational_expr      go to state 111
    additive_expr        go to state 67
    multiplicative_expr  go to state 68
    unary_expr           go to state 69
    postfix_expr         go to state 70
    primary_expr         go to state 71


State 88

   61 equality_expr: equality_expr NE . relational_expr

    CHARLIT     shift, and go to state 38
    IDENTIFIER  shift, and go to state 81
    INTEGER     shift, and go to state 46
    FLOATING    shift, and go to state 47
    '-'         shift, and go to state 48
    '('         shift, and go to state 50

    relational_expr      go to state 112
    additive_expr        go to state 67
    multiplicative_expr  go to state 68
    unary_expr           go to state 69
    postfix_expr         go to state 70
    primary_expr         go to state 71


State 89

   63 relational_expr: relational_expr '<' . additive_expr

    CHARLIT     shift, and go to state 38
    IDENTIFIER  shift, and go to state 81
    INTEGER     shift, and go to state 46
    FLOATING    shift, and go to state 47
    '-'         shift, and go to state 48
    '('         shift, and go to state 50

    additive_expr        go to state 113
    multiplicative_expr  go to state 68
    unary_expr           go to state 69
    postfix_expr         go to state 70
    primary_expr         go to state 71


State 90

   64 relational_expr: relational_expr '>' . additive_expr

    CHARLIT     shift, and go to state 38
    IDENTIFIER  shift, and go to state 81
    INTEGER     shift, and go to state 46
    FLOATING    shift, and go to state 47
    '-'         shift, and go to state 48
    '('         shift, and go to state 50

    additive_expr        go to state 114
    multiplicative_expr  go to state 68
    unary_expr           go to state 69
    postfix_expr         go to state 70
    primary_expr         go to state 71


State 91

   65 relational_expr: relational_expr LE . additive_expr

    CHARLIT     shift, and go to state 38
    IDENTIFIER  shift, and go to state 81
    INTEGER     shift, and go to state 46
    FLOATING    shift, and go to state 47
    '-'         shift, and go to state 48
    '('         shift, and go to state 50

    additive_expr        go to state 115
    multiplicative_expr  go to state 68
    unary_expr           go to state 69
    postfix_expr         go to state 70
    primary_expr         go to state 71


State 92

   66 relational_expr: relational_expr GE . additive_expr

    CHARLIT     shift, and go to state 38
    IDENTIFIER  shift, and go to state 81
    INTEGER     shift, and go to state 46
    FLOATING    shift, and go to state 47
    '-'         shift, and go to state 48
    '('         shift, and go to state 50

    additive_expr        go to state 116
    multiplicative_expr  go to state 68
    unary_expr           go to state 69
    postfix_expr         go to state 70
    primary_expr         go to state 71


State 93

   68 additive_expr: additive_expr '+' . multiplicative_expr

    CHARLIT     shift, and go to state 38
    IDENTIFIER  shift, and go to state 81
    INTEGER     shift, and go to state 46
    FLOATING    shift, and go to state 47
    '-'         shift, and go to state 48
    '('         shift, and go to state 50

    multiplicative_expr  go to state 117
    unary_expr           go to state 69
    postfix_expr         go to state 70
    primary_expr         go to state 71


State 94

   69 additive_expr: additive_expr '-' . multiplicative_expr

    CHARLIT     shift, and go to state 38
    IDENTIFIER  shift, and go to state 81
    INTEGER     shift, and go to state 46
    FLOATING    shift, and go to state 47
    '-'         shift, and go to state 48
    '('         shift, and go to state 50

    multiplicative_expr  go to state 118
    unary_expr           go to state 69
    postfix_expr         go to state 70
    primary_expr         go to state 71


State 95

   71 multiplicative_expr: multiplicative_expr '*' . unary_expr

    CHARLIT     shift, and go to state 38
    IDENTIFIER  shift, and go to state 81
    INTEGER     shift, and go to state 46
    FLOATING    shift, and go to state 47
    '-'         shift, and go to state 48
    '('         shift, and go to state 50

    unary_expr    go to state 119
    postfix_expr  go to state 70
    primary_expr  go to state 71


State 96

   72 multiplicative_expr: multiplicative_expr '/' . unary_expr

    CHARLIT     shift, and go to state 38
    IDENTIFIER  shift, and go to state 81
    INTEGER     shift, and go to state 46
    FLOATING    shift, and go to state 47
    '-'         shift, and go to state 48
    '('         shift, and go to state 50

    unary_expr    go to state 120
    postfix_expr  go to state 70
    primary_expr  go to state 71


State 97

   77 postfix_expr: postfix_expr '[' . expr ']'

    CHARLIT     shift, and go to state 38
    IDENTIFIER  shift, and go to state 45
    INTEGER     shift, and go to state 46
    FLOATING    shift, and go to state 47
    '-'         shift, and go to state 48
    '('         shift, and go to state 50

    expr                 go to state 121
    logical_or_expr      go to state 63
    logical_and_expr     go to state 64
    equality_expr        go to state 65
    relational_expr      go to state 66
    additive_expr        go to state 67
    multiplicative_expr  go to state 68
    unary_expr           go to state 69
    postfix_expr         go to state 70
    primary_expr         go to state 71


State 98

   28 open_if_stmt: IF '(' expr . ')' statement
   29             | IF '(' expr . ')' closed_if_stmt ELSE open_if_stmt
   30 closed_if_stmt: IF '(' expr . ')' closed_if_stmt ELSE closed_if_stmt

    ')'  shift, and go to state 122


State 99

   40 for_stmt: FOR '(' expr_stmt . expr_stmt expr ')' statement

    CHARLIT     shift, and go to state 38
    IDENTIFIER  shift, and go to state 45
    INTEGER     shift, and go to state 46
    FLOATING    shift, and go to state 47
    '-'         shift, and go to state 48
    ';'         shift, and go to state 49
    '('         shift, and go to state 50

    expr_stmt            go to state 123
    expr                 go to state 62
    logical_or_expr      go to state 63
    logical_and_expr     go to state 64
    equality_expr        go to state 65
    relational_expr      go to state 66
    additive_expr        go to state 67
    multiplicative_expr  go to state 68
    unary_expr           go to state 69
    postfix_expr         go to state 70
    primary_expr         go to state 71


State 100

   41 while_stmt: WHILE '(' expr . ')' statement

    ')'  shift, and go to state 124


State 101

   42 switch_stmt: SWITCH '(' expr . ')' '{' case_list '}'

    ')'  shift, and go to state 125


State 102

   47 print_stmt: PRINTF '(' STRING . ',' arg_list ')' ';'
   48           | PRINTF '(' STRING . ')' ';'

    ','  shift, and go to state 126
    ')'  shift, and go to state 127


State 103

   51 scan_stmt: SCANF '(' STRING . ',' '&' IDENTIFIER ')' ';'

    ','  shift, and go to state 128


State 104

   53 expr: IDENTIFIER '[' expr . ']' '=' expr

    ']'  shift, and go to state 129


State 105

   49 arg_list: arg_list . ',' expr
   76 postfix_expr: IDENTIFIER '(' arg_list . ')'

    ','  shift, and go to state 130
    ')'  shift, and go to state 131


State 106

   50 arg_list: expr .

    $default  reduce using rule 50 (arg_list)


State 107

   52 expr: IDENTIFIER '=' expr .

    $default  reduce using rule 52 (expr)


State 108

   82 primary_expr: '(' expr ')' .

    $default  reduce using rule 82 (primary_expr)


State 109

   56 logical_or_expr: logical_or_expr OR logical_and_expr .
   58 logical_and_expr: logical_and_expr . AND equality_expr

    AND  shift, and go to state 86

    $default  reduce using rule 56 (logical_or_expr)


State 110

   58 logical_and_expr: logical_and_expr AND equality_expr .
   60 equality_expr: equality_expr . EQ relational_expr
   61              | equality_expr . NE relational_expr

    EQ  shift, and go to state 87
    NE  shift, and go to state 88

    $default  reduce using rule 58 (logical_and_expr)


State 111

   60 equality_expr: equality_expr EQ relational_expr .
   63 relational_expr: relational_expr . '<' additive_expr
   64                | relational_expr . '>' additive_expr
   65                | relational_expr . LE additive_expr
   66                | relational_expr . GE additive_expr

    '<'  shift, and go to state 89
    '>'  shift, and go to state 90
    LE   shift, and go to state 91
    GE   shift, and go to state 92

    $default  reduce using rule 60 (equality_expr)


State 112

   61 equality_expr: equality_expr NE relational_expr .
   63 relational_expr: relational_expr . '<' additive_expr
   64                | relational_expr . '>' additive_expr
   65                | relational_expr . LE additive_expr
   66                | relational_expr . GE additive_expr

    '<'  shift, and go to state 89
    '>'  shift, and go to state 90
    LE   shift, and go to state 91
    GE   shift, and go to state 92

    $default  reduce using rule 61 (equality_expr)


State 113

   63 relational_expr: relational_expr '<' additive_expr .
   68 additive_expr: additive_expr . '+' multiplicative_expr
   69              | additive_expr . '-' multiplicative_expr

    '+'  shift, and go to state 93
    '-'  shift, and go to state 94

    $default  reduce using rule 63 (relational_expr)


State 114

   64 relational_expr: relational_expr '>' additive_expr .
   68 additive_expr: additive_expr . '+' multiplicative_expr
   69              | additive_expr . '-' multiplicative_expr

    '+'  shift, and go to state 93
    '-'  shift, and go to state 94

    $default  reduce using rule 64 (relational_expr)


State 115

   65 relational_expr: relational_expr LE additive_expr .
   68 additive_expr: additive_expr . '+' multiplicative_expr
   69              | additive_expr . '-' multiplicative_expr

    '+'  shift, and go to state 93
    '-'  shift, and go to state 94

    $default  reduce using rule 65 (relational_expr)


State 116

   66 relational_expr: relational_expr GE additive_expr .
   68 additive_expr: additive_expr . '+' multiplicative_expr
   69              | additive_expr . '-' multiplicative_expr

    '+'  shift, and go to state 93
    '-'  shift, and go to state 94

    $default  reduce using rule 66 (relational_expr)


State 117

   68 additive_expr: additive_expr '+' multiplicative_expr .
   71 multiplicative_expr: multiplicative_expr . '*' unary_expr
   72                    | multiplicative_expr . '/' unary_expr

    '*'  shift, and go to state 95
    '/'  shift, and go to state 96

    $default  reduce using rule 68 (additive_expr)


State 118

   69 additive_expr: additive_expr '-' multiplicative_expr .
   71 multiplicative_expr: multiplicative_expr . '*' unary_expr
   72                    | multiplicative_expr . '/' unary_expr

    '*'  shift, and go to state 95
    '/'  shift, and go to state 96

    $default  reduce using rule 69 (additive_expr)


State 119

   71 multiplicative_expr: multiplicative_expr '*' unary_expr .

    $default  reduce using rule 71 (multiplicative_expr)


State 120

   72 multiplicative_expr: multiplicative_expr '/' unary_expr .

    $default  reduce using rule 72 (multiplicative_expr)


State 121

   77 postfix_expr: postfix_expr '[' expr . ']'

    ']'  shift, and go to state 132


State 122

   28 open_if_stmt: IF '(' expr ')' . statement
   29             | IF '(' expr ')' . closed_if_stmt ELSE open_if_stmt
   30 closed_if_stmt: IF '(' expr ')' . closed_if_stmt ELSE closed_if_stmt

    CHARLIT     shift, and go to state 38
    IF          shift, and go to state 39
    FOR         shift, and go to state 40
    WHILE       shift, and go to state 41
    SWITCH      shift, and go to state 42
    PRINTF      shift, and go to state 43
    SCANF       shift, and go to state 44
    IDENTIFIER  shift, and go to state 45
    INTEGER     shift, and go to state 46
    FLOATING    shift, and go to state 47
    '-'         shift, and go to state 48
    ';'         shift, and go to state 49
    '('         shift, and go to state 50
    '{'         shift, and go to state 31

    compound_stmt        go to state 52
    statement            go to state 133
    open_if_stmt         go to state 54
    closed_if_stmt       go to state 134
    expr_stmt            go to state 56
    for_stmt             go to state 57
    while_stmt           go to state 58
    switch_stmt          go to state 59
    print_stmt           go to state 60
    scan_stmt            go to state 61
    expr                 go to state 62
    logical_or_expr      go to state 63
    logical_and_expr     go to state 64
    equality_expr        go to state 65
    relational_expr      go to state 66
    additive_expr        go to state 67
    multiplicative_expr  go to state 68
    unary_expr           go to state 69
    postfix_expr         go to state 70
    primary_expr         go to state 71


State 123

   40 for_stmt: FOR '(' expr_stmt expr_stmt . expr ')' statement

    CHARLIT     shift, and go to state 38
    IDENTIFIER  shift, and go to state 45
    INTEGER     shift, and go to state 46
    FLOATING    shift, and go to state 47
    '-'         shift, and go to state 48
    '('         shift, and go to state 50

    expr                 go to state 135
    logical_or_expr      go to state 63
    logical_and_expr     go to state 64
    equality_expr        go to state 65
    relational_expr      go to state 66
    additive_expr        go to state 67
    multiplicative_expr  go to state 68
    unary_expr           go to state 69
    postfix_expr         go to state 70
    primary_expr         go to state 71


State 124

   41 while_stmt: WHILE '(' expr ')' . statement

    CHARLIT     shift, and go to state 38
    IF          shift, and go to state 39
    FOR         shift, and go to state 40
    WHILE       shift, and go to state 41
    SWITCH      shift, and go to state 42
    PRINTF      shift, and go to state 43
    SCANF       shift, and go to state 44
    IDENTIFIER  shift, and go to state 45
    INTEGER     shift, and go to state 46
    FLOATING    shift, and go to state 47
    '-'         shift, and go to state 48
    ';'         shift, and go to state 49
    '('         shift, and go to state 50
    '{'         shift, and go to state 31

    compound_stmt        go to state 52
    statement            go to state 136
    open_if_stmt         go to state 54
    closed_if_stmt       go to state 55
    expr_stmt            go to state 56
    for_stmt             go to state 57
    while_stmt           go to state 58
    switch_stmt          go to state 59
    print_stmt           go to state 60
    scan_stmt            go to state 61
    expr                 go to state 62
    logical_or_expr      go to state 63
    logical_and_expr     go to state 64
    equality_expr        go to state 65
    relational_expr      go to state 66
    additive_expr        go to state 67
    multiplicative_expr  go to state 68
    unary_expr           go to state 69
    postfix_expr         go to state 70
    primary_expr         go to state 71


State 125

   42 switch_stmt: SWITCH '(' expr ')' . '{' case_list '}'

    '{'  shift, and go to state 137


State 126

   47 print_stmt: PRINTF '(' STRING ',' . arg_list ')' ';'

    CHARLIT     shift, and go to state 38
    IDENTIFIER  shift, and go to state 45
    INTEGER     shift, and go to state 46
    FLOATING    shift, and go to state 47
    '-'         shift, and go to state 48
    '('         shift, and go to state 50

    arg_list             go to state 138
    expr                 go to state 106
    logical_or_expr      go to state 63
    logical_and_expr     go to state 64
    equality_expr        go to state 65
    relational_expr      go to state 66
    additive_expr        go to state 67
    multiplicative_expr  go to state 68
    unary_expr           go to state 69
    postfix_expr         go to state 70
    primary_expr         go to state 71


State 127

   48 print_stmt: PRINTF '(' STRING ')' . ';'

    ';'  shift, and go to state 139


State 128

   51 scan_stmt: SCANF '(' STRING ',' . '&' IDENTIFIER ')' ';'

    '&'  shift, and go to state 140


State 129

   53 expr: IDENTIFIER '[' expr ']' . '=' expr

    '='  shift, and go to state 141


State 130

   49 arg_list: arg_list ',' . expr

    CHARLIT     shift, and go to state 38
    IDENTIFIER  shift, and go to state 45
    INTEGER     shift, and go to state 46
    FLOATING    shift, and go to state 47
    '-'         shift, and go to state 48
    '('         shift, and go to state 50

    expr                 go to state 142
    logical_or_expr      go to state 63
    logical_and_expr     go to state 64
    equality_expr        go to state 65
    relational_expr      go to state 66
    additive_expr        go to state 67
    multiplicative_expr  go to state 68
    unary_expr           go to state 69
    postfix_expr         go to state 70
    primary_expr         go to state 71


State 131

   76 postfix_expr: IDENTIFIER '(' arg_list ')' .

    $default  reduce using rule 76 (postfix_expr)


State 132

   77 postfix_expr: postfix_expr '[' expr ']' .

    $default  reduce using rule 77 (postfix_expr)


State 133

   28 open_if_stmt: IF '(' expr ')' statement .

    $default  reduce using rule 28 (open_if_stmt)


State 134

   27 statement: closed_if_stmt .
   29 open_if_stmt: IF '(' expr ')' closed_if_stmt . ELSE open_if_stmt
   30 closed_if_stmt: IF '(' expr ')' closed_if_stmt . ELSE closed_if_stmt

    ELSE  shift, and go to state 143

    ELSE      [reduce using rule 27 (statement)]
    $default  reduce using rule 27 (statement)


State 135

   40 for_stmt: FOR '(' expr_stmt expr_stmt expr . ')' statement

    ')'  shift, and go to state 144


State 136

   41 while_stmt: WHILE '(' expr ')' statement .

    $default  reduce using rule 41 (while_stmt)


State 137

   42 switch_stmt: SWITCH '(' expr ')' '{' . case_list '}'

    CASE     shift, and go to state 145
    DEFAULT  shift, and go to state 146

    case_list  go to state 147
    case       go to state 148


State 138

   47 print_stmt: PRINTF '(' STRING ',' arg_list . ')' ';'
   49 arg_list: arg_list . ',' expr

    ','  shift, and go to state 130
    ')'  shift, and go to state 149


State 139

   48 print_stmt: PRINTF '(' STRING ')' ';' .

    $default  reduce using rule 48 (print_stmt)


State 140

   51 scan_stmt: SCANF '(' STRING ',' '&' . IDENTIFIER ')' ';'

    IDENTIFIER  shift, and go to state 150


State 141

   53 expr: IDENTIFIER '[' expr ']' '=' . expr

    CHARLIT     shift, and go to state 38
    IDENTIFIER  shift, and go to state 45
    INTEGER     shift, and go to state 46
    FLOATING    shift, and go to state 47
    '-'         shift, and go to state 48
    '('         shift, and go to state 50

    expr                 go to state 151
    logical_or_expr      go to state 63
    logical_and_expr     go to state 64
    equality_expr        go to state 65
    relational_expr      go to state 66
    additive_expr        go to state 67
    multiplicative_expr  go to state 68
    unary_expr           go to state 69
    postfix_expr         go to state 70
    primary_expr         go to state 71


State 142

   49 arg_list: arg_list ',' expr .

    $default  reduce using rule 49 (arg_list)


State 143

   29 open_if_stmt: IF '(' expr ')' closed_if_stmt ELSE . open_if_stmt
   30 closed_if_stmt: IF '(' expr ')' closed_if_stmt ELSE . closed_if_stmt

    CHARLIT     shift, and go to state 38
    IF          shift, and go to state 39
    FOR         shift, and go to state 40
    WHILE       shift, and go to state 41
    SWITCH      shift, and go to state 42
    PRINTF      shift, and go to state 43
    SCANF       shift, and go to state 44
    IDENTIFIER  shift, and go to state 45
    INTEGER     shift, and go to state 46
    FLOATING    shift, and go to state 47
    '-'         shift, and go to state 48
    ';'         shift, and go to state 49
    '('         shift, and go to state 50
    '{'         shift, and go to state 31

    compound_stmt        go to state 52
    open_if_stmt         go to state 152
    closed_if_stmt       go to state 153
    expr_stmt            go to state 56
    for_stmt             go to state 57
    while_stmt           go to state 58
    switch_stmt          go to state 59
    print_stmt           go to state 60
    scan_stmt            go to state 61
    expr                 go to state 62
    logical_or_expr      go to state 63
    logical_and_expr     go to state 64
    equality_expr        go to state 65
    relational_expr      go to state 66
    additive_expr        go to state 67
    multiplicative_expr  go to state 68
    unary_expr           go to state 69
    postfix_expr         go to state 70
    primary_expr         go to state 71


State 144

   40 for_stmt: FOR '(' expr_stmt expr_stmt expr ')' . statement

    CHARLIT     shift, and go to state 38
    IF          shift, and go to state 39
    FOR         shift, and go to state 40
    WHILE       shift, and go to state 41
    SWITCH      shift, and go to state 42
    PRINTF      shift, and go to state 43
    SCANF       shift, and go to state 44
    IDENTIFIER  shift, and go to state 45
    INTEGER     shift, and go to state 46
    FLOATING    shift, and go to state 47
    '-'         shift, and go to state 48
    ';'         shift, and go to state 49
    '('         shift, and go to state 50
    '{'         shift, and go to state 31

    compound_stmt        go to state 52
    statement            go to state 154
    open_if_stmt         go to state 54
    closed_if_stmt       go to state 55
    expr_stmt            go to state 56
    for_stmt             go to state 57
    while_stmt           go to state 58
    switch_stmt          go to state 59
    print_stmt           go to state 60
    scan_stmt            go to state 61
    expr                 go to state 62
    logical_or_expr      go to state 63
    logical_and_expr     go to state 64
    equality_expr        go to state 65
    relational_expr      go to state 66
    additive_expr        go to state 67
    multiplicative_expr  go to state 68
    unary_expr           go to state 69
    postfix_expr         go to state 70
    primary_expr         go to state 71


State 145

   45 case: CASE . INTEGER ':' stmt_list

    INTEGER  shift, and go to state 155


State 146

   46 case: DEFAULT . ':' stmt_list

    ':'  shift, and go to state 156


State 147

   42 switch_stmt: SWITCH '(' expr ')' '{' case_list . '}'
   43 case_list: case_list . case

    CASE     shift, and go to state 145
    DEFAULT  shift, and go to state 146
    '}'      shift, and go to state 157

    case  go to state 158


State 148

   44 case_list: case .

    $default  reduce using rule 44 (case_list)


State 149

   47 print_stmt: PRINTF '(' STRING ',' arg_list ')' . ';'

    ';'  shift, and go to state 159


State 150

   51 scan_stmt: SCANF '(' STRING ',' '&' IDENTIFIER . ')' ';'

    ')'  shift, and go to state 160


State 151

   53 expr: IDENTIFIER '[' expr ']' '=' expr .

    $default  reduce using rule 53 (expr)


State 152

   29 open_if_stmt: IF '(' expr ')' closed_if_stmt ELSE open_if_stmt .

    $default  reduce using rule 29 (open_if_stmt)


State 153

   30 closed_if_stmt: IF '(' expr ')' closed_if_stmt ELSE closed_if_stmt .

    $default  reduce using rule 30 (closed_if_stmt)


State 154

   40 for_stmt: FOR '(' expr_stmt expr_stmt expr ')' statement .

    $default  reduce using rule 40 (for_stmt)


State 155

   45 case: CASE INTEGER . ':' stmt_list

    ':'  shift, and go to state 161


State 156

   46 case: DEFAULT ':' . stmt_list

    $default  reduce using rule 25 (stmt_list)

    stmt_list  go to state 162


State 157

   42 switch_stmt: SWITCH '(' expr ')' '{' case_list '}' .

    $default  reduce using rule 42 (switch_stmt)


State 158

   43 case_list: case_list case .

    $default  reduce using rule 43 (case_list)


State 159

   47 print_stmt: PRINTF '(' STRING ',' arg_list ')' ';' .

    $default  reduce using rule 47 (print_stmt)


State 160

   51 scan_stmt: SCANF '(' STRING ',' '&' IDENTIFIER ')' . ';'

    ';'  shift, and go to state 163


State 161

   45 case: CASE INTEGER ':' . stmt_list

    $default  reduce using rule 25 (stmt_list)

    stmt_list  go to state 164


State 162

   24 stmt_list: stmt_list . statement
   46 case: DEFAULT ':' stmt_list .

    CHARLIT     shift, and go to state 38
    IF          shift, and go to state 39
    FOR         shift, and go to state 40
    WHILE       shift, and go to state 41
    SWITCH      shift, and go to state 42
    PRINTF      shift, and go to state 43
    SCANF       shift, and go to state 44
    IDENTIFIER  shift, and go to state 45
    INTEGER     shift, and go to state 46
    FLOATING    shift, and go to state 47
    '-'         shift, and go to state 48
    ';'         shift, and go to state 49
    '('         shift, and go to state 50
    '{'         shift, and go to state 31

    $default  reduce using rule 46 (case)

    compound_stmt        go to state 52
    statement            go to state 53
    open_if_stmt         go to state 54
    closed_if_stmt       go to state 55
    expr_stmt            go to state 56
    for_stmt             go to state 57
    while_stmt           go to state 58
    switch_stmt          go to state 59
    print_stmt           go to state 60
    scan_stmt            go to state 61
    expr                 go to state 62
    logical_or_expr      go to state 63
    logical_and_expr     go to state 64
    equality_expr        go to state 65
    relational_expr      go to state 66
    additive_expr        go to state 67
    multiplicative_expr  go to state 68
    unary_expr           go to state 69
    postfix_expr         go to state 70
    primary_expr         go to state 71


State 163

   51 scan_stmt: SCANF '(' STRING ',' '&' IDENTIFIER ')' ';' .

    $default  reduce using rule 51 (scan_stmt)


State 164

   24 stmt_list: stmt_list . statement
   45 case: CASE INTEGER ':' stmt_list .

    CHARLIT     shift, and go to state 38
    IF          shift, and go to state 39
    FOR         shift, and go to state 40
    WHILE       shift, and go to state 41
    SWITCH      shift, and go to state 42
    PRINTF      shift, and go to state 43
    SCANF       shift, and go to state 44
    IDENTIFIER  shift, and go to state 45
    INTEGER     shift, and go to state 46
    FLOATING    shift, and go to state 47
    '-'         shift, and go to state 48
    ';'         shift, and go to state 49
    '('         shift, and go to state 50
    '{'         shift, and go to state 31

    $default  reduce using rule 45 (case)

    compound_stmt        go to state 52
    statement            go to state 53
    open_if_stmt         go to state 54
    closed_if_stmt       go to state 55
    expr_stmt            go to state 56
    for_stmt             go to state 57
    while_stmt           go to state 58
    switch_stmt          go to state 59
    print_stmt           go to state 60
    scan_stmt            go to state 61
    expr                 go to state 62
    logical_or_expr      go to state 63
    logical_and_expr     go to state 64
    equality_expr        go to state 65
    relational_expr      go to state 66
    additive_expr        go to state 67
    multiplicative_expr  go to state 68
    unary_expr           go to state 69
    postfix_expr         go to state 70
    primary_expr         go to state 71
